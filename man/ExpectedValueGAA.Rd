% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ExpectedValueGAA.R
\name{ExpectedValueGAA}
\alias{ExpectedValueGAA}
\title{Expected Value for Grouped Amino Acid}
\usage{
ExpectedValueGAA(seqs, k = 3, Grp = "locFus", normalized = TRUE, label = c())
}
\arguments{
\item{seqs}{is a FASTA file with amino acid sequences. Each sequence starts
with a '>' character. Also, seqs could be a string vector. Each element of the vector is a peptide/protein sequence.}

\item{k}{is an integer value. The default is three.}

\item{Grp}{is a list of vectors containig amino acids. Each vector represents a category. Users can define a customized amino acid grouping, provided that the sum of all amino acids is 20 and there is no repeated amino acid in the groups.
Also, users can choose 'cTriad'(conjointTriad), 'locFus', or 'aromatic'. Each option provides specific information about the type of an amino acid grouping.}

\item{normalized}{is a logical parameter. When it is FALSE, the return value of the function does not change. Otherwise, the return value is normalized using the length of the sequence.}

\item{label}{is an optional parameter. It is a vector whose length is equivalent to the number of sequences. It shows the class of
each entry (i.e., sequence).}
}
\value{
This function returns a feature matrix. The number of rows is equal to the number of sequences and
the number of columns is (number of categories)^k.
}
\description{
This function is introduced by this package for the first time.
In this function, amino acids are first grouped into user-defined categories.
Later, the expected value of grouped amino acids is computed.
Please note that this function differs from Function \link{ExpectedValueAA} which works on individual amino acids.
}
\details{
for more information about ExpectedValueGAA, please refer to function ExpectedValueKmer.
}
\examples{

filePrs<-system.file("extdata/proteins.fasta",package="ftrCOOL")
mat1<-ExpectedValueGAA(seqs=filePrs,k=2,Grp="locFus")

mat2<-ExpectedValueGAA(seqs=filePrs,k=1,Grp=
list(Grp1=c("G","A","V","L","M","I","F","Y","W"),Grp2=c("K","R","H","D","E")
,Grp3=c("S","T","C","P","N","Q")))
}
